package main

import (
	"be_api/app/cli"
	"be_api/app/configs"
	"be_api/app/controllers"
	"be_api/app/crons"
	"be_api/app/database"
	appMiddleware "be_api/app/middleware"
	"be_api/app/utils"
	"be_api/app/validator"
	"fmt"
	"os/exec"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/spf13/cobra"
	echoSwagger "github.com/swaggo/echo-swagger"

	_ "be_api/docs" // docs is generated by Swag CLI, you have to import it.
)

func main() {
	configs.InitConfig()
	database.InitDB()

	var rootCmd = &cobra.Command{
		Use:   "app",
		Short: "This is a CLI application with Echo server",
	}

	var serverCmd = &cobra.Command{
		Use:   "serve",
		Short: "Start the Echo server",
		Run: func(cmd *cobra.Command, args []string) {
			runSwagDoc()
			runEchoServer()
		},
	}

	var taskApp = &cobra.Command{
		Use:   "task",
		Short: "Application Tasks",
		Run: func(cmd *cobra.Command, args []string) {
			cli.CliRunTask(args)
		},
	}

	rootCmd.AddCommand(serverCmd)
	rootCmd.AddCommand(taskApp)

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
	}

}

func runSwagDoc() {
	fmt.Printf("runSwagDoc ==========================================\n")
	cmd := exec.Command("swag", "init")

	err := cmd.Run()
	if err != nil {
		utils.CustomLog(err)
	}
}

// @title MarketPlace API DOC
// @version 1.0
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description "Authorization header should be in the format: 'Bearer {token}'"
func runEchoServer() {
	//echo start here
	e := echo.New()

	// Middleware
	if utils.InArrayHelper(configs.AppConfig.APPLogLevel, []string{"INFO"}) {
		e.Use(middleware.Logger())
	}
	if utils.InArrayHelper(configs.AppConfig.APPLogLevel, []string{"INFO", "ERROR"}) {
		e.Use(middleware.Recover())
	}

	e.Use(appMiddleware.TrimMiddleware)
	e.Validator = validator.NewCustomValidator()
	validator.RegisterValidators(e.Validator)

	//init cron
	crons.NewAppCron().RunCron()

	// e.GET("/", controllers.NewWelcomeController().Index)
	// e.GET("/health", controllers.NewWelcomeController().Health)
	e.GET("/api/docs/*", echoSwagger.WrapHandler)
	// e.Static("/uploads", "uploads")

	bm := []echo.MiddlewareFunc{
		appMiddleware.JwtMiddleware,
	}

	//ROUTE
	v1 := e.Group("/v1")
	{

		authUserController := controllers.NewAuthUserController()
		v1.POST("/auth/register", authUserController.Register)
		v1.POST("/auth/login", authUserController.Login)

		userProfile := controllers.NewUserProfileController()
		v1userProfile := v1.Group("/user", bm...)
		v1userProfile.GET("/profile", userProfile.Profile)

		productCategoryController := controllers.NewProductCategoryController()
		//v1productCategoryController := v1.Group("/product-categories", bm...)
		v1.GET("/product-categories", productCategoryController.Index)
		v1.GET("/product-categories/:id", productCategoryController.Show)
		v1.POST("/product-categories", productCategoryController.Store)
		v1.PUT("/product-categories/:id", productCategoryController.Update)
		v1.DELETE("/product-categories/:id", productCategoryController.Destroy)
		v1.DELETE("/product-categories/:id/bulk-delete", productCategoryController.BulkDestroy)

	}

	utils.PrintRouteHelper(e)

	e.Logger.Fatal(e.Start(":" + configs.AppConfig.APPPort))
}
